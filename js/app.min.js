/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/ELEMENTS/spollers/spollers.js":
/*!*******************************************!*\
  !*** ./src/ELEMENTS/spollers/spollers.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n// Для родитиля спойлеров пишем атрибут data-spollers\r\n// Для заголовка спойлера пишем фтрибут data-spoller\r\n\r\n// Если нужно что бы в блоке открывался только один спойлер добавляем атрибут\r\n// data-one-spoller\r\n\r\n// Если нужно включить/выключить работу спойлеров на разных размерах экранов\r\n// пишем параметры ширины и типа брейкпоинта.\r\n// data-spollers=\"800,max\" - спойлеры будут работать только на экранах менше или равно 800px\r\n// data-spollers=\"650,min\" - спойлеры будут работать только на экранах больше или равно 650px\r\n// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n\r\n// в переменною \"spollersArray\" получаем колэкцию из всех обектов в которых есть дата атрибут [data-spollers]\r\nconst spollersArray = document.querySelectorAll('[data-spollers]');\r\n\r\n// если \"spollersArray\" не пустой\r\nif (spollersArray.length > 0) {\r\n  //В переменною \"spollersRegular\" Получаем все спойлера в которых нету медиа запроссов (console.log(spollersRegular);)\r\n  const spollersRegular = Array.from(spollersArray).filter(function (item, index, self) {\r\n    return !item.dataset.spollers.split(',')[0];\r\n  });\r\n  // Если есть такие спойлера то запускаем функцию initSpollers(spollersRegular); в которою передаем масив с етими спойлерами\r\n  if (spollersRegular.length > 0) {\r\n    // запускаем функцию initSpollers (Иницилизирует ети спойлери)\r\n    initSpollers(spollersRegular);\r\n  }\r\n\r\n  //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n\r\n  //В переменною \"spollersMedia\" Получаем все спойлера в которых есть медиа запроссы ( console.log(spollersMedia); = [div.block.block_2, div.block.block_3] итд.)\r\n  const spollersMedia = Array.from(spollersArray).filter(function (item, index, self) {\r\n    return item.dataset.spollers.split(',')[0];\r\n  });\r\n\r\n  // Если есть такие спойлера (c медиа запросами) то\r\n  if (spollersMedia.length > 0) {\r\n    // в массиве \"breakpointsArray\" будут созданные обекты для каждого спойлера в которых есть медиа запроссы  [{value: \"650\", type: \"min\", item: div.block.block_2}, {value: \"800\", type: \"max\", item: div.block.block_3} итд.]\r\n    const breakpointsArray = [];\r\n    // у каждого етого спойлера [div.block.block_2, div.block.block_3]\r\n    spollersMedia.forEach((item) => {\r\n      //из html < data-spollers=\"650,min\"> получаем строку с параметрами < 650,min >\r\n      const params = item.dataset.spollers;\r\n      //в обект \"breakpoint\" будем ложить брекпоинт, значения и сам елемент (спойлер) {value: \"650\", type: \"min\", item: div.block.block_2}\r\n      const breakpoint = {};\r\n      // раздиляем строку параметра на масив  [\"650\", \"min\"]\r\n      const paramsArrey = params.split(',');\r\n      // из масива \"paramsArrey\" ложим значения по индексу [0] (в данном случаи \"650\") в обект \"breakpoint\" <value: \"650\">\r\n      breakpoint.value = paramsArrey[0];\r\n      // из масива \"paramsArrey\" ложим значения по индексу [1] (в данном случаи \"min\") в обект \"breakpoint\" < type: \"min\"> если не указан то поумолчанию будт < type: \"max\">\r\n      breakpoint.type = paramsArrey[1] ? paramsArrey[1].trim() : 'max';\r\n      // в обект \"breakpoint\" добавляем етот елемент (спойлер) < item: div.block.block_2 >\r\n      breakpoint.item = item;\r\n      // в массив \"breakpointsArray\" додаем созданний обект \"breakpoint\" для етот спойлера\r\n      breakpointsArray.push(breakpoint);\r\n    });\r\n\r\n    // формируем строки медиа запроссов [\"{min-width:650px),650,min\", \"{min-width:650px),650,min\", \"{max-width:800px),800,max\"]\r\n    let mediaQueries = breakpointsArray.map(function (item) {\r\n      return '(' + item.type + '-width:' + item.value + 'px),' + item.value + ',' + item.type;\r\n    });\r\n    // убераем повторы медиа запроссов [\"{min-width:650px),650,min\", \"{max-width:800px),800,max\"]\r\n    mediaQueries = mediaQueries.filter(function (item, index, self) {\r\n      //\r\n      return self.indexOf(item) === index;\r\n    });\r\n\r\n    // робота з кажним брейкпоинтом\r\n    mediaQueries.forEach((breakpoint) => {\r\n      // розбиваем на [\"(min-width:650px)\", \"650\", \"min\"] итд.\r\n      const paramsArrey = breakpoint.split(',');\r\n      // кладьом 650\r\n      const mediaBreakpoint = paramsArrey[1];\r\n      // кладьом min\r\n      const mediaType = paramsArrey[2];\r\n      // бедет слушать ширину екрана например (min-width:650px)\r\n      const matchMedia = window.matchMedia(paramsArrey[0]);\r\n\r\n      // сортируем обекти с нужным условиям (одинаковые вмести)\r\n      const spollersArray = breakpointsArray.filter(function (item) {\r\n        if (item.value === mediaBreakpoint && item.type === mediaType) {\r\n          return true;\r\n        }\r\n      });\r\n\r\n      // При сробатовании matchMedia запускаем функию initSpollers(spollersArray, matchMedia); в которою передаем параметры\r\n      matchMedia.addListener(function () {\r\n        initSpollers(spollersArray, matchMedia);\r\n      });\r\n      // запускаем функцию initSpollers сразу при загрузке страницы\r\n      initSpollers(spollersArray, matchMedia);\r\n    });\r\n  }\r\n\r\n  // Иницилизация\r\n  function initSpollers(spollersArray, matchMedia = false) {\r\n    spollersArray.forEach((spollersBlock) => {\r\n      // если matchMedia дает true тогда присваюваем spollersBlock.item а если  false spollersBlock;\r\n      spollersBlock = matchMedia ? spollersBlock.item : spollersBlock;\r\n\r\n      // если сработал брейкпоинт или он не бил задан спойлкру тогда\r\n      if (matchMedia.matches || !matchMedia) {\r\n        // оболочке спойлера присваеватсь класс '_init'\r\n        spollersBlock.classList.add('_init');\r\n        // запускаем функцию initSpollerBody\r\n        initSpollerBody(spollersBlock);\r\n        // при клики на spollersBlock вызываем функцию\r\n        spollersBlock.addEventListener('click', setSpollerAction);\r\n      } else {\r\n        // отбераем у spollersBlock класс '_init'\r\n        spollersBlock.classList.remove('_init');\r\n        // запускаем функцию initSpollerBody\r\n        initSpollerBody(spollersBlock, false);\r\n        // убераем события клик\r\n        spollersBlock.removeEventListener('click', setSpollerAction);\r\n      }\r\n    });\r\n  }\r\n  // Робота с контентом\r\n  function initSpollerBody(spollersBlock, hideSpollerBody = true) {\r\n    // получаем все заголовки спойлеров внутри блока spollersBlock\r\n    const spollerTitles = spollersBlock.querySelectorAll('[data-spoller]');\r\n    // если есть заголовки\r\n    if (spollerTitles.length > 0) {\r\n      // то для каждого заголовка\r\n      spollerTitles.forEach((spollerTitle) => {\r\n        // если под етим заголовком сойлер скрыт то\r\n        if (hideSpollerBody) {\r\n          // у етого заголовка убераем атрибут таб-индекс (ето включает возможность переходить по етим заголовкам нажатиям на клавишу таб)\r\n          spollerTitle.removeAttribute('tabindex');\r\n          // если у етого заголовка нету класса '_active'\r\n          if (!spollerTitle.classList.contains('_active')) {\r\n            // тогда скриваем контентною часть\r\n            spollerTitle.nextElementSibling.hidden = true;\r\n          }\r\n        } else {\r\n          // если под данным заголовком спойлер открыт то\r\n          // добавляем таб индекс -1\r\n          spollerTitle.setAttribute('tabindex', '-1');\r\n          // разкрываем спойлеры если они били скрыти\r\n          spollerTitle.nextElementSibling.hidden = false;\r\n        }\r\n      });\r\n    }\r\n  }\r\n  // Выполняется когда кликаем на заголовок спойлера\r\n  function setSpollerAction(e) {\r\n    // в \"el\" получаем нажатый обект\r\n    const el = e.target;\r\n    // если у етого обекта или у его родитиля есть 'data-spoller' то\r\n    if (el.hasAttribute('data-spoller') || el.closest('[data-spoller]')) {\r\n      // получаем сам заголовок (кнопку) спойлура\r\n      const spollerTitle = el.hasAttribute('data-spoller') ? el : el.closest('[data-spoller]');\r\n      // Находим ближайшого родитиля з атрибутом [data-spollers]\r\n      const spollersBlock = spollerTitle.closest('[data-spollers]');\r\n      // если у етого родитиля есть атрибут 'data-one-spoller' то oneSpoller будет = true, если нет то false\r\n      const oneSpoller = spollersBlock.hasAttribute('data-one-spoller') ? true : false;\r\n      // если у данного родитиля нету обекта з классом _slide то\r\n      if (!spollersBlock.querySelectorAll('_slide').length) {\r\n        // если у родитиля есть дата-атрибут 'data-one-spoller' и в заголовке спойлера нету класса '_active' то\r\n        if (oneSpoller && !spollerTitle.classList.contains('_active')) {\r\n          // запускаем функцию hideSpollerBody которая скривает все спойлеры\r\n          hideSpollerBody(spollersBlock);\r\n        }\r\n        // будет скривать или показувать слайды\r\n        _slideToggle(spollerTitle.nextElementSibling, 200);\r\n      }\r\n      // отминяет события по умолчанию\r\n      e.preventDefault();\r\n    }\r\n  }\r\n  // скривает все спойлеры\r\n  function hideSpollerBody(spollersBlock) {\r\n    // получаю открытый спойлер внутри родитильського обекта (spollersBlock)\r\n    const spollerActiveTitle = spollersBlock.querySelector('[data-spoller]._active');\r\n    // если есть такой обект то\r\n    if (spollerActiveTitle) {\r\n      // скрываем все елементы\r\n      _slideUp(spollerActiveTitle.nextElementSibling, 500);\r\n    }\r\n  }\r\n}\r\n\r\n// функция которая скривает анимировано елемент\r\nlet _slideUp = (target, duration = 500) => {\r\n  if (!target.classList.contains('_slide')) {\r\n    target.classList.add('_slide');\r\n    target.previousElementSibling.classList.remove('_active');\r\n    target.style.transitionProperty = 'height, margin, padding';\r\n    target.style.transitionDuration = duration + 'ms';\r\n    target.style.height = target.offsetHeight + 'px';\r\n    target.offsetHeight;\r\n    target.style.overflow = 'hidden';\r\n    target.style.height = 0;\r\n    target.style.paddingTop = 0;\r\n    target.style.paddingBottom = 0;\r\n    target.style.marginTop = 0;\r\n    target.style.marginBottom = 0;\r\n    window.setTimeout(() => {\r\n      target.hidden = true;\r\n      target.style.removeProperty('height');\r\n      target.style.removeProperty('padding-top');\r\n      target.style.removeProperty('padding-bottom');\r\n      target.style.removeProperty('margin-top');\r\n      target.style.removeProperty('margin-bottom');\r\n      target.style.removeProperty('overflow');\r\n      target.style.removeProperty('transition-duration');\r\n      target.style.removeProperty('transition-property');\r\n      target.classList.remove('_slide');\r\n    }, duration);\r\n  }\r\n};\r\n// функция которая анимировано показует елемент\r\nlet _slideDown = (target, duration = 500) => {\r\n  if (!target.classList.contains('_slide')) {\r\n    target.classList.add('_slide');\r\n    if (target.hidden) {\r\n      target.hidden = false;\r\n    }\r\n    target.previousElementSibling.classList.add('_active');\r\n    let height = target.offsetHeight;\r\n    target.style.overflow = 'hidden';\r\n    target.style.height = 0;\r\n    target.style.paddingTop = 0;\r\n    target.style.paddingBottom = 0;\r\n    target.style.marginTop = 0;\r\n    target.style.marginBottom = 0;\r\n    target.offsetHeight;\r\n    target.style.transitionProperty = 'height, margin, padding'; //+\r\n    target.style.transitionDuration = duration + 'ms'; //+\r\n    target.style.height = height + 'px';\r\n    target.style.removeProperty('padding-top');\r\n    target.style.removeProperty('padding-bottom');\r\n    target.style.removeProperty('margin-top');\r\n    target.style.removeProperty('margin-bottom');\r\n    window.setTimeout(() => {\r\n      target.style.removeProperty('height');\r\n      target.style.removeProperty('overflow');\r\n      target.style.removeProperty('transition-duration');\r\n      target.style.removeProperty('transition-property');\r\n      target.classList.remove('_slide');\r\n    }, duration);\r\n  }\r\n};\r\n// функция которая анимировано показует елемент или скрывает\r\nlet _slideToggle = (target, duration = 500) => {\r\n  if (target.hidden) {\r\n    return _slideDown(target, duration);\r\n  } else {\r\n    return _slideUp(target, duration);\r\n  }\r\n};\r\n\n\n//# sourceURL=webpack://gulpstart/./src/ELEMENTS/spollers/spollers.js?");

/***/ }),

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _ELEMENTS_spollers_spollers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ELEMENTS/spollers/spollers.js */ \"./src/ELEMENTS/spollers/spollers.js\");\n\r\n// =============================================================================\r\n// import '../ELEMENTS/select/js/select1.js';\r\n\r\n\n\n//# sourceURL=webpack://gulpstart/./src/js/app.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/app.js");
/******/ 	
/******/ })()
;